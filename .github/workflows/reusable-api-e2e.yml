name: E2E API Tests

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  workflow_call:
    inputs:
      test-e2e-affected:
        description: 'detect if we should run e2e tests'
        required: false
        default: true
        type: boolean
      test-e2e-ee-affected:
        description: 'detect if we should run e2e-ee tests'
        required: false
        default: true
        type: boolean
      ee:
        description: 'use the ee version of api'
        required: false
        default: false
        type: boolean
      job-name:
        description: 'job name [options: novu/api-ee, novu/api]'
        required: true
        type: string
      slack_notification:
        description: 'notify if e2e fail via slack'
        required: false
        default: false
        type: boolean
      environment:
        required: false
        default: 'Development'
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_submodule_token:
    if: ${{ inputs.ee }}
    name: Check if the secret exists or not.
    runs-on: ubuntu-latest
    outputs:
      has_token: ${{ steps.secret-check.outputs.has_token }}
    steps:
      - name: Check if secret exists
        id: secret-check
        run: |
          if [[ -n "${{ secrets.SUBMODULES_TOKEN }}" ]]; then
            echo "::set-output name=has_token::true"
          else
            echo "::set-output name=has_token::false"
          fi

  # This workflow contains a single job called "build"
  e2e_api:
    name: Test E2E
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 80
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    needs: [check_submodule_token]
    if: |
      ${{ contains (inputs.job-name,'-ee') && inputs.test-e2e-ee-affected == 'true' }} ||
      ${{ !contains (inputs.job-name,'-ee') && inputs.test-e2e-affected == 'true' }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout with submodules if token is provided
      - uses: actions/checkout@v3
        name: Checkout with submodules
        if: ${{ needs.check_submodule_token.outputs.has_token == 'true' && inputs.ee }}
        with:
          submodules: true
          token: ${{ secrets.SUBMODULES_TOKEN }}

      # else checkout without submodules if the token is not provided
      - uses: actions/checkout@v3
        name: Checkout
        if: ${{ needs.check_submodule_token.outputs.has_token != 'true' || !contains (inputs.job-name,'-ee') }}

      - uses: ./.github/actions/setup-project
        name: Setup project
        with:
          submodules: ${{ inputs.ee && needs.check_submodule_token.outputs.has_token == 'true' }}

      - uses: ./.github/actions/setup-redis-cluster
        name: Setup redis cluster

      - uses: ./.github/actions/start-localstack
        name: Start localstack


      - uses: ./.github/actions/run-worker
        name: Run worker
        with:
          launch_darkly_sdk_key: ${{ secrets.LAUNCH_DARKLY_SDK_KEY }}
          ee: ${{ needs.check_submodule_token.outputs.has_token == 'true' && inputs.ee }}

        # Runs a single command using the runners shell
      - name: Build API
        run: CI='' pnpm build:api --skip-nx-cache

      - name: Run E2E tests
        env:
          LAUNCH_DARKLY_SDK_KEY: ${{ secrets.LAUNCH_DARKLY_SDK_KEY }}
        run: |
          cd apps/api && pnpm test:e2e

      - name: Run E2E EE tests
        if: ${{ needs.check_submodule_token.outputs.has_token == 'true' && inputs.ee }}
        env:
          LAUNCH_DARKLY_SDK_KEY: ${{ secrets.LAUNCH_DARKLY_SDK_KEY }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          CI_EE_TEST: true
        run: |
          cd apps/api && pnpm test:e2e:ee

      - name: Kill port for worker 1342 for unit tests
        run: sudo kill -9 $(sudo lsof -t -i:1342)

      - name: Run unit tests
        run: |
          cd apps/api && pnpm test

      - name: Notify Slack Action
        uses: ravsamhq/notify-slack-action@v2
        if: ${{ always() && inputs.slack_notification }}
        with:
          status: ${{ job.status }}
          notification_title: "{workflow} for API has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>"
          footer: "Linked Run URL {run_url}\nCommit URL{commit_url}"
          notify_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
